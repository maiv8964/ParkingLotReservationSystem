/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 29 23:24:20 GMT 2023
 */

package paymentStrategy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import paymentStrategy.MobilePaymentProvider;
import paymentStrategy.PaymentInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MobilePaymentProvider_ESTest extends MobilePaymentProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(1, 1, "l=9r5", "l=9r5", (-1));
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, 1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(1412, (-561), "kt?D%V", "hc2{ ;B V", 1412);
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, (-561));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo((-1363), (-1363), "#N{&{pi$5/Z</A`", "#N{&{pi$5/Z</A`", 1);
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      // Undeclared exception!
      try { 
        mobilePaymentProvider0.handlePayment((PaymentInfo) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("paymentStrategy.MobilePaymentProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(234, 234, "paymentStrategy.PaymentInfo", "", 0);
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, 674.16011432);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(989, 989, (String) null, "4I;&Qmg~>Z", 0);
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, 1707.8235025119684);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(1, 1, "Invalid payment information.", (String) null, 1);
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(2638, 0, "paymentStrategy.PaymentInfo", "", (-431));
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, (-2183.8660126));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MobilePaymentProvider mobilePaymentProvider0 = new MobilePaymentProvider();
      PaymentInfo paymentInfo0 = new PaymentInfo(0, (-19), "paymentStrategy.PaymentInfo", "", (-19));
      boolean boolean0 = mobilePaymentProvider0.handlePayment(paymentInfo0, 3703.5247);
      assertFalse(boolean0);
  }
}
