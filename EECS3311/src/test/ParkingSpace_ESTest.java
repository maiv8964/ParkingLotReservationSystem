/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 29 23:19:00 GMT 2023
 */

package parking;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import parking.ParkingSpace;
import parkingState.State;
import reservations.Reservation;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParkingSpace_ESTest extends ParkingSpace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-279));
      assertTrue(parkingSpace0.isEnabled());
      
      parkingSpace0.setEnabled(false);
      boolean boolean0 = parkingSpace0.isEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-279));
      Reservation reservation0 = new Reservation((-279), (-2131), 761, 1668, "Plt=N_Qr((p/", parkingSpace0);
      parkingSpace0.setReservation(reservation0);
      parkingSpace0.getReservations();
      assertEquals((-279), parkingSpace0.getId());
      assertTrue(parkingSpace0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace(0);
      int int0 = parkingSpace0.getId();
      assertEquals(0, int0);
      assertTrue(parkingSpace0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace(1476);
      int int0 = parkingSpace0.getId();
      assertEquals(1476, int0);
      assertTrue(parkingSpace0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-279));
      boolean boolean0 = parkingSpace0.isEnabled();
      assertTrue(boolean0);
      assertEquals((-279), parkingSpace0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-1608));
      parkingSpace0.setState((State) null);
      parkingSpace0.getSensorStatus();
      assertTrue(parkingSpace0.isEnabled());
      assertEquals((-1608), parkingSpace0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-279));
      parkingSpace0.setEnabled(true);
      assertEquals((-279), parkingSpace0.getId());
      assertTrue(parkingSpace0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-1608));
      parkingSpace0.getReservations();
      assertEquals((-1608), parkingSpace0.getId());
      assertTrue(parkingSpace0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-1608));
      parkingSpace0.setId(1760);
      assertEquals(1760, parkingSpace0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-1608));
      parkingSpace0.getSensorStatus();
      assertEquals((-1608), parkingSpace0.getId());
      assertTrue(parkingSpace0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParkingSpace parkingSpace0 = new ParkingSpace((-1608));
      int int0 = parkingSpace0.getId();
      assertTrue(parkingSpace0.isEnabled());
      assertEquals((-1608), int0);
  }
}
