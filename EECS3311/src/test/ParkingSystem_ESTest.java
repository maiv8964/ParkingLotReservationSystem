/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 29 23:17:51 GMT 2023
 */

package parking;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import parking.ParkingLot;
import parking.ParkingSpace;
import parking.ParkingSystem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParkingSystem_ESTest extends ParkingSystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      parkingSystem0.addLot(0, "");
      parkingSystem0.setEnableLot(0, false);
      boolean boolean0 = parkingSystem0.isLotEnabled(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      parkingSystem0.addLot(0, "");
      ParkingSpace parkingSpace0 = parkingSystem0.getParkingSpace(0, 0);
      assertEquals(0, parkingSpace0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      ParkingLot parkingLot0 = parkingSystem0.addLot(99, (String) null);
      assertEquals(99, parkingLot0.getId());
      
      ParkingSpace parkingSpace0 = parkingSystem0.getParkingSpace(99, 99);
      assertEquals(99, parkingSpace0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      ParkingLot parkingLot0 = parkingSystem0.addLot(0, "");
      assertEquals(0, parkingLot0.getId());
      
      parkingSystem0.setEnableLot(0, false);
      ParkingLot parkingLot1 = parkingSystem0.getLot(0);
      assertFalse(parkingLot1.getEnabled());
      assertNotNull(parkingLot1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      parkingSystem0.addLot(99, (String) null);
      ParkingLot parkingLot0 = parkingSystem0.getLot(99);
      assertNotNull(parkingLot0);
      assertEquals(99, parkingLot0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      // Undeclared exception!
      try { 
        parkingSystem0.isLotEnabled(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("parking.ParkingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      // Undeclared exception!
      try { 
        parkingSystem0.getParkingSpace(2745, (-578));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("parking.ParkingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      ParkingLot parkingLot0 = parkingSystem0.getLot((-1));
      assertNull(parkingLot0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      ParkingSystem parkingSystem1 = ParkingSystem.getInstance();
      assertSame(parkingSystem1, parkingSystem0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      parkingSystem0.addLot((-1), "");
      ParkingLot parkingLot0 = parkingSystem0.getLot((-1));
      assertEquals((-1), parkingLot0.getId());
      assertNotNull(parkingLot0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      // Undeclared exception!
      try { 
        parkingSystem0.getParkingSpace(1493, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid space id
         //
         verifyException("parking.ParkingLot", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      // Undeclared exception!
      try { 
        parkingSystem0.setEnableLot((-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("parking.ParkingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      Map<Integer, ParkingLot> map0 = parkingSystem0.getLots();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParkingSystem parkingSystem0 = ParkingSystem.getInstance();
      assertNotNull(parkingSystem0);
      
      boolean boolean0 = parkingSystem0.isLotEnabled(1);
      assertTrue(boolean0);
  }
}
