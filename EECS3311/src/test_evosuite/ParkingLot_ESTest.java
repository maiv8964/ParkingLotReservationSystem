/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 29 23:16:40 GMT 2023
 */

package test_evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import parking.ParkingLot;
import parking.ParkingSpace;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ParkingLot_ESTest extends ParkingLot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(0, "rR&fxd");
      ParkingSpace parkingSpace0 = parkingLot0.getParkingSpace(0);
      assertTrue(parkingLot0.getEnabled());
      assertNotNull(parkingSpace0);
      assertEquals(0, parkingLot0.getId());
      assertEquals(0, parkingSpace0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(99, "bzS&L3U");
      int int0 = parkingLot0.getId();
      assertEquals(99, int0);
      assertTrue(parkingLot0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot((-221), "");
      int int0 = parkingLot0.getId();
      assertEquals((-221), int0);
      assertTrue(parkingLot0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(0, "IkL}_',-)D7m.");
      assertTrue(parkingLot0.getEnabled());
      
      parkingLot0.setEnabled(false);
      boolean boolean0 = parkingLot0.getEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(99, "bzS&L3U");
      parkingLot0.getAddress();
      assertTrue(parkingLot0.getEnabled());
      assertEquals(99, parkingLot0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(1, "");
      parkingLot0.getAddress();
      assertEquals(1, parkingLot0.getId());
      assertTrue(parkingLot0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(99, "bzS&L3U");
      try { 
        parkingLot0.getParkingSpace(1541);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid space id
         //
         verifyException("parking.ParkingLot", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(99, "bzS&L3U");
      ParkingSpace parkingSpace0 = parkingLot0.getParkingSpace(99);
      assertNotNull(parkingSpace0);
      assertEquals(99, parkingSpace0.getId());
      assertEquals(99, parkingLot0.getId());
      assertTrue(parkingLot0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot((-1), "");
      try { 
        parkingLot0.getParkingSpace((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid space id
         //
         verifyException("parking.ParkingLot", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(0, (String) null);
      parkingLot0.getAddress();
      assertTrue(parkingLot0.getEnabled());
      assertEquals(0, parkingLot0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot((-1), "@)+ z,#");
      boolean boolean0 = parkingLot0.getEnabled();
      assertTrue(boolean0);
      assertEquals((-1), parkingLot0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParkingLot parkingLot0 = new ParkingLot(0, (String) null);
      int int0 = parkingLot0.getId();
      assertEquals(0, int0);
      assertTrue(parkingLot0.getEnabled());
  }
}
