/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 29 23:27:49 GMT 2023
 */

package test_evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import userLogin.User;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User();
      user0.email = "xi";
      String string0 = user0.toString();
      assertEquals("User [name=null null, id=0, email=xi, password=null]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User();
      user0.setType("l");
      String string0 = user0.toString();
      assertEquals("User [name=null null, id=0, email=null, password=null]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.lname = "TRUE";
      String string0 = user0.toString();
      assertEquals("User [name=null TRUE, id=0, email=null, password=null]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User("]qT+28", "pH?Bu,,p", 185, "pH?Bu,,p", "pH?Bu,,p", "");
      String string0 = user0.getEmail();
      assertEquals("pH?Bu,,p", user0.getLName());
      assertNotNull(string0);
      assertEquals("", user0.getType());
      assertEquals("pH?Bu,,p", user0.getPassword());
      assertEquals("pH?Bu,,p", string0);
      assertFalse(user0.isValidated);
      assertEquals(185, user0.id);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User("M", "M", 1421, ";sbr7>v~$TA>?Vz", "", "manager");
      user0.setName(";sbr7>v~$TA>?Vz", "M");
      assertEquals("", user0.getPassword());
      assertEquals(1421, user0.id);
      assertEquals(";sbr7>v~$TA>?Vz", user0.getEmail());
      assertTrue(user0.isValidated);
      assertEquals("manager", user0.getFName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User("visitor", (String) null, (-1), "", (String) null, "");
      String string0 = user0.getType();
      assertEquals((-1), user0.id);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(user0.isValidated);
      assertEquals("", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User("SMA`etw.\"/S:*M]7}y", "", (-3741), "l]Gy0UP(V-Wt0", "", "");
      assertEquals("", user0.getPassword());
      
      user0.password = null;
      String string0 = user0.getPassword();
      assertNull(string0);
      assertFalse(user0.isValidated);
      assertEquals((-3741), user0.id);
      assertEquals("l]Gy0UP(V-Wt0", user0.getEmail());
      assertEquals("", user0.getType());
      assertEquals("", user0.getLName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User("  /<", "B-C8%i_}D=~", (-2464), "  /<", "  /<", "");
      String string0 = user0.getPassword();
      assertEquals((-2464), user0.id);
      assertEquals("", user0.getType());
      assertEquals("B-C8%i_}D=~", user0.getLName());
      assertEquals("  /<", string0);
      assertFalse(user0.isValidated);
      assertEquals("  /<", user0.getEmail());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      user0.type = "aj $xh4PpRjOBq-H";
      String string0 = user0.getLName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.lname = "";
      user0.setType("");
      String string0 = user0.getLName();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User("]qT+28", "pH?Bu,,p", 185, "pH?Bu,,p", "pH?Bu,,p", "");
      assertEquals(185, user0.id);
      
      user0.setId(0);
      int int0 = user0.getId();
      assertEquals(0, user0.id);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User("`GRu&V_nv*.*KkH*Pq", "`GRu&V_nv*.*KkH*Pq", 0, "`GRu&V_nv*.*KkH*Pq", "", "Ip0me[4j@ie,uFqf7");
      user0.setId(197);
      int int0 = user0.getId();
      assertEquals(197, user0.id);
      assertEquals(197, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User("visitor", (String) null, (-1), "", (String) null, "");
      assertEquals("visitor", user0.getFName());
      
      user0.setName("", "");
      String string0 = user0.getFName();
      assertEquals("", user0.getFName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User("visitor", (String) null, (-1), "", (String) null, "");
      String string0 = user0.getEmail();
      assertEquals((-1), user0.id);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(user0.isValidated);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      try { 
        user0.setValidation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      try { 
        user0.getLName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User();
      // Undeclared exception!
      try { 
        user0.getFName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = null;
      try {
        user0 = new User((String) null, (String) null, 0, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User("M", "M", 1421, ";sbr7>v~$TA>?Vz", "", "manager");
      String string0 = user0.getValidation();
      assertEquals(";sbr7>v~$TA>?Vz", user0.getEmail());
      assertEquals(1421, user0.id);
      assertEquals("TRUE", string0);
      assertEquals("manager", user0.getType());
      assertEquals("", user0.getPassword());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getValidation();
      assertEquals("FALSE", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User();
      user0.setValidation("TRUE");
      assertTrue(user0.isValidated);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      User user0 = new User("visitor", (String) null, (-1), "visitor", (String) null, "visitor");
      assertTrue(user0.isValidated);
      
      user0.setValidation("");
      assertFalse(user0.isValidated);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      User user0 = new User("@W2kgG:3", "@W2kgG:3", 3299, "@W2kgG:3", "@W2kgG:3", "@W2kgG:3");
      String string0 = user0.getLName();
      assertNotNull(string0);
      assertFalse(user0.isValidated);
      assertEquals(3299, user0.id);
      assertEquals("@W2kgG:3", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      User user0 = new User("Ehz", "NI/h<Hz3z?", 1421, "super", "|Te=uqx}N4Pk`pN4.", "super");
      String string0 = user0.getLName();
      assertEquals("super", user0.getEmail());
      assertEquals(1421, user0.id);
      assertEquals("admin", string0);
      assertEquals("|Te=uqx}N4Pk`pN4.", user0.getPassword());
      assertFalse(user0.isValidated);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      User user0 = new User("manager", "manager", (-1107658900), "manager", "manager", "manager");
      String string0 = user0.getLName();
      assertEquals((-1107658900), user0.id);
      assertEquals("manager", string0);
      assertTrue(user0.isValidated);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      User user0 = new User((String) null, ", id=", 1, "}CTsh TusN{cM8gR", "", "");
      String string0 = user0.getFName();
      assertEquals(1, user0.id);
      assertFalse(user0.isValidated);
      assertEquals("", user0.getPassword());
      assertNull(string0);
      assertEquals("", user0.getType());
      assertEquals("}CTsh TusN{cM8gR", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      User user0 = new User("manager", "manager", (-1107658900), "manager", "manager", "manager");
      String string0 = user0.getFName();
      assertEquals((-1107658900), user0.id);
      assertTrue(user0.isValidated);
      assertEquals("manager", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      User user0 = new User("vstor", "vstor", (-60), "vstor", "vstor", "vstor");
      assertEquals("vstor", user0.getFName());
      
      user0.setType("super");
      user0.getFName();
      assertEquals("super", user0.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      User user0 = new User("M", "M", 1421, ";sbr7>v~$TA>?Vz", "", "manager");
      String string0 = user0.getType();
      assertEquals(";sbr7>v~$TA>?Vz", user0.getEmail());
      assertEquals("", user0.getPassword());
      assertNotNull(string0);
      assertEquals("manager", string0);
      assertTrue(user0.isValidated);
      assertEquals(1421, user0.id);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      User user0 = new User("visitor", (String) null, (-1), "visitor", (String) null, "visitor");
      user0.setEmail("JT9;OImI*P<");
      assertEquals("JT9;OImI*P<", user0.getEmail());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      User user0 = new User("visitor", (String) null, (-1), "visitor", (String) null, "visitor");
      int int0 = user0.getId();
      assertEquals((-1), int0);
      assertTrue(user0.isValidated);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      User user0 = new User("ne'}*5sxGOP,#h{", "", (-316), "", "", "ne'}*5sxGOP,#h{");
      String string0 = user0.getPassword();
      assertEquals("", user0.getLName());
      assertNotNull(string0);
      assertEquals("ne'}*5sxGOP,#h{", user0.getType());
      assertEquals((-316), user0.id);
      assertFalse(user0.isValidated);
      assertEquals("", user0.getEmail());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      User user0 = new User();
      user0.setPassword("User [name=null TRUE, id=0, email=xi, password=null]");
      String string0 = user0.toString();
      assertEquals("User [name=null null, id=0, email=null, password=User [name=null TRUE, id=0, email=xi, password=null]]", string0);
  }
}
